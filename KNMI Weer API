#include <ESP8266WiFi.h>
#include <ArduinoJson.h>
#include "networkcredentials.h"

void setup() {
  Serial.begin(115200);
  // put your setup code here, to run once:
  const char* ssid     = mySSID;     
  const char* password = myPASSWORD;  
  
  Serial.print("Connecting WiFi");
  WiFi.begin(ssid, password);
    while (WiFi.status() != WL_CONNECTED) {
      delay(500);
      Serial.print(".");
    }
  Serial.println("");
  Serial.print("Connected: "); Serial.println(WiFi.localIP());

  // Connect to HTTP server
  Serial.println(F("Connecting Server"));
  WiFiClient client;
  client.setTimeout(10000);
  if (!client.connect("weerlive.nl", 80)) {
    Serial.println(F("Connection failed"));
    return;
  }
  Serial.println("Connected!");

  // Send HTTP request
  client.println(F("GET /api/json-10min.php?locatie=Rotterdam HTTP/1.0"));
  client.println(F("Host: weerlive.nl"));
  client.println(F("Connection: close"));
  if (client.println() == 0) {
    Serial.println(F("Failed to send request"));
    return;
  }

  // Check HTTP status
  char status[32] = {0};
  client.readBytesUntil('\r', status, sizeof(status));
  if (strcmp(status, "HTTP/1.1 200 OK") != 0) {
    Serial.print(F("Unexpected response: "));
    Serial.println(status);
    return;
  }

  // Skip HTTP headers
  char endOfHeaders[] = "\r\n\r\n";
  if (!client.find(endOfHeaders)) {
    Serial.println(F("Invalid response"));
    return;
  }

  // Response object line maken
  String line;
  int repeatCounter = 0;
  while (!client.available() && repeatCounter < 10) {
    delay(500);
    Serial.println("w.");
    repeatCounter++;
  }
  while (client.connected() && client.available()) {
    char c = client.read(); 
    if (c == '[' || c == ']') c = ' ';
    line += c;
  }
  Serial.println("response: " + line);


  // line door de JSON Parser halen
  Serial.println("Parsing");
  // Allocate JsonBuffer
  // Use arduinojson.org/assistant to compute the capacity.
  const size_t bufferSize = JSON_OBJECT_SIZE(1) + JSON_OBJECT_SIZE(49) + 1417;
  DynamicJsonBuffer jsonBuffer(bufferSize);

  // Parse JSON object
  JsonObject& root = jsonBuffer.parseObject(line);
  if (!root.success()) {
    Serial.println("Parsing failed!");
    return;
  }

  // Extract values
  JsonObject& liveweer = root["liveweer"];
  const char* liveweer_temp = liveweer["temp"]; 
  const char* liveweer_gtemp = liveweer["gtemp"]; 
  const char* liveweer_samenv = liveweer["samenv"]; 
  const char* liveweer_windr = liveweer["windr"]; 
  const char* liveweer_windms = liveweer["windms"]; 
  const char* liveweer_sunder = liveweer["sunder"]; 
  const char* liveweer_verw = liveweer["verw"]; 
  const char* liveweer_alarmtxt = liveweer["alarmtxt"]; 
  Serial.println(liveweer_temp);
  Serial.println(liveweer_gtemp);
  Serial.println(liveweer_samenv);
  Serial.println(liveweer_windr);
  Serial.println(liveweer_windms);
  Serial.println(liveweer_sunder);
  Serial.println(liveweer_verw);
   Serial.println(liveweer_alarmtxt); 
  // Disconnect
  client.stop();
}

void loop() {
  // whatever
}
